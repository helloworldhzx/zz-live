<template>
	<view class="live bg-dark">
		<video class="flex-1" :src="src" autoplay
			:controls="false"></video>
		<!-- 头部区域 -->
		<view class="header" :style="{top: `${statusBarHeight}px`}">
			<view style="height: 80rpx;" class="px-2 flex justify-between align-center">
				<view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle">
					<view class="p">
						<image :src="detail.user.avatar || '/static/tabbar/min.png'" style="width: 70rpx;height: 70rpx;" class="rounded-circle"></image>
					</view>
					<view class="flex-1 flex flex-column justify-center">
						<text class="text-white font">{{ detail.user.username }}</text>
						<text class="text-white font-sm">{{ detail.look_count }}</text>
					</view>
					<view class="p">
						<view class="rounded-circle flex align-center justify-center bg-danger" style="width: 70rpx;height: 70rpx;">
							<text class="text-white">+</text>
						</view>
					</view>
				</view>
				
				<view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle">
					<!-- 实时在线观看用户情况 -->
					<scroll-view scroll-x="true" class="flex-1 flex">
						<view class="p" v-for="(item,index) in userList" :key="index">
							<image :src="item.avatar || '/static/tabbar/min.png'" style="width: 70rpx;height: 70rpx;" class="rounded-circle"></image>
						</view>
					</scroll-view>
					<view class="p">
						<view class="rounded-circle flex align-center justify-center bg-danger" style="width: 70rpx;height: 70rpx;">
							<!-- 实时在线观看人数 -->
							<text class="text-white font-sm">{{ userList.length }}</text>
						</view>
					</view>
				</view>
			</view>
			<!-- 金币 -->
			<view style="height: 80rpx;" class="px-2 my-2">
				<view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle align-center">
					<view class="p">
						<text class="text-warning">金币</text>
					</view>
					<view class="flex-1 flex flex-column justify-center">
						<text class="text-white font">{{ detail.coin }}</text>
					</view>
				</view>
			</view>
			<!-- 礼物区域 -->
			<gift ref='gift'></gift>

			<!-- 弹幕区域 -->
			<danmu ref="danmu"></danmu>
		</view>

		<!-- 底部 -->
		<view class="footer flex align-center justify-between px-2">
			<view class="">
				<view class="btn px-3" @click="openInput">
					<text class="text-white">说点什么...</text>
				</view>
			</view>
			<view class="flex align-center">
				<view class="btn btn-icon" @click="toCoin">
					<text class="iconfont text-white">&#xe633;</text>
				</view>
				<view class="btn btn-icon bg-warning" @click="openGift">
					<text class="iconfont">&#xe67c;</text>
				</view>
				<view class="btn btn-icon">
					<text class="iconfont text-white">&#xe7cd;</text>
				</view>
				<view class="btn btn-icon" @click="back">
					<text class="iconfont text-white">&#xe607;</text>
				</view>
			</view>
		</view>

		<!-- 输入框弹出层 -->
		<uni-popup ref="input" type="bottom">
			<view class="flex align-center bg-white px-3" style="width: 750rpx; height: 120rpx;">
				<input v-model="content" type="text" value="" class="flex-1 border rounded" style="height: 80rpx;"
					placeholder="请说点什么" />
				<view class="flex align-center justify-center py-2 px-2 ml-3 rounded bg-main" style="height: 80rpx;">
					<text class="text-white" @click="send">发送</text>
				</view>
			</view>
		</uni-popup>

		<!-- 礼物弹出层 -->
		<uni-popup ref="giftPopup" type="bottom">
			<view class="bg-white px-1" style="height: 550rpx;">
				<view class="flex justify-between h-100">
					<view class="flex align-center justify-center w-100 h-100">
						<text class="text-main">礼物</text>
					</view>
					<view class="p flex align-center justify-center w-100 h-100" @click="closeGift()">
						<text class="iconfont">&#xe607;</text>
					</view>
				</view>
				<swiper style="height: 350rpx" class="border-bottom border-top" :indicator-dots="true" :interval="500">
					<swiper-item>
						<view class="flex flex-wrap">
							<view @click="activeGift=item.id" class="border flex flex-column justify-center align-center"
								style="width: 182.5rpx; height: 174rpx;"
								:class="activeGift===item.id?'border-main':'border-transparent'" v-for="item in gifts">
								<image style="width: 100rpx;height: 100rpx;" :src="item.image"></image>
								<view class="flex mt-1">
									<text class="text-warning mr-1">{{item.name}}</text>
									<text>{{item.coin}}</text>
								</view>
							</view>
						</view>
					</swiper-item>
				</swiper>
				<view>

				</view>
				<view class="flex justify-end align-center h-100">
					<view class="flex justify-center align-center bg-warning px-3 py-2 mr-3 rounded">
						<text class="font">充值</text>
					</view>
					<view class="flex justify-center align-center bg-main px-3 py-2 mr-3 rounded">
						<text class="text-white font" @click="sendGift">发送</text>
					</view>
				</view>
			</view>
		</uni-popup>
	</view>
</template>

<script>
	import danmu from '../../components/live/danmu.vue';
	import gift from '../../components/live/gift.vue';
	import $C from '../../common/config.js'
	import $H from '../../common/request.js'
	import { mapState } from 'vuex'
	export default {
		data() {
			return {
				detail:{
					"created_time": "",
					"id": 1,
					"title": "",
					"cover": "",
					"user_id": 0,
					"look_count": 0,
					"coin": 0,
					"key": "",
					"status": 0,
					"userId": 0,
					"user": {
						"id": 0,
						"username": "",
						"avatar": ""
					}
				},
				sign:"",
				userList:[],
				statusBarHeight: 0,
				content: "",
				activeGift: 0,
				gifts: []
			}
		},
		onLoad(e){
			this.id = e.id
			let res = uni.getSystemInfoSync()
			this.statusBarHeight = res.statusBarHeight
			uni.$on('live',this.handleLiveEvent)
			$H.get('/gift/list').then(res=>{
				this.gifts = res.map(item=>{
					item.image = $C.baseUrl + item.image
					return item
				})
			})
			$H.get('/live/read/' + this.id).then(res=>{
				console.log(res);
				this.detail = res.data
				this.sign = res.sign
			})
			// 监听全局事件
			uni.$on('liveStatus',this.handlStatusEvent)
		},
		destroyed() {
			// 移除全局事件
			uni.$off('liveStatus',this.handlStatusEvent)
		},
		components: {
			danmu,
			gift
		},
		computed:{
			...mapState({
				token: state => state.token,
				socket: state => state.socket,
			}),
			src() {
				console.log(this.sign, this.detail.key);
				if(this.detail.key == '' || this.sign == ''){
					return ''
				}
				return `${$C.livePlayBaseUrl}/live/${this.detail.key}.flv?sign=${this.sign}`
			}
		},
		mounted() {
			this.joinOrLeaveLive('join')
		},
		destroyed() {
			// 离开直播间
			this.joinOrLeaveLive('leave')
			// 移除全局事件
			uni.$off('live',this.handleLiveEvent)
		},
		methods: {
			joinOrLeaveLive(type){
				this.socket.emit(type+'Live', {
					token: this.token,
					live_id: this.id
				})
			},
			handlStatusEvent(e){
				uni.showToast({
					title: e.message,
					icon:'none'
				});
			},
			handleLiveEvent(e){
				console.log(e);
				const d = e.data;
				switch (e.type){
					case 'online':
					this.userList = d.data
						break;
					case 'comment':
						this.$refs.danmu.send({
							id:d.id,
							name:d.user.name,
							content:d.content
						})
						this.content = ''
						this.$refs.input.close()
						break;
					case 'gift':
						d.gift_image = $C.imageUrl + d.gift_image
						this.detail.coin += d.gift_coin * d.num
						this.$refs.gift.send(d)
						this.closeGift()
						break;
					default:
						break;
				}
			},
			toCoin(){
				uni.navigateTo({
					url: "../coin/coin"
				})
			},
			openInput() {
				this.$refs.input.open()
			},
			openGift() {
				this.$refs.giftPopup.open()
			},
			closeGift(){
				this.$refs.giftPopup.close()
			},
			closeInput() {
				this.$refs.input.close()
			},
			back() {
				uni.navigateBack({
					delta: 1
				})
			},
			send() {
				if(this.content === ''){
					return uni.showToast({
						title: '评论内容不能为空',
						icon: 'none'
					});
				}
				
				if(!this.token && !this.socket){
					uni.navigateTo({
						url: '../login/login',
					});
					return uni.showToast({
						title: '请先登录',
						icon: 'none'
					});
				}

				if(this.socket){
					this.socket.emit('comment',{
						live_id:this.id,
						data:this.content,
						token:this.token
					})
				}

			},
			sendGift(){
				if(this.activeGift === 0){
					return uni.showToast({
						title: '请选择要发送的礼物',
						icon: 'none'
					});
				}
				let index = this.gifts.findIndex(item=>item.id === this.activeGift)
				if(index === -1){
					return
				}
				let g = this.gifts[index]
				
				if(!this.token && !this.socket){
					uni.navigateTo({
						url: '../login/login',
					});
					return uni.showToast({
						title: '请先登录',
						icon: 'none'
					});
				}
				
				if(this.socket){
					this.socket.emit('gift',{
						live_id:this.id,
						gift_id:g.id,
						token:this.token
					})
				}
			}
		}
	}
</script>

<style>
	.live {
		flex: 1;
	}

	.header {
		position: fixed;
		left: 0;
		right: 0;
		top: 0;
	}

	.anchor,
	.viewer {
		width: 375rpx;
	}

	.footer {
		position: fixed;
		bottom: 0;
		left: 0;
		right: 0;
		height: 120rpx;
	}

	.btn {
		height: 80rpx;
		border-radius: 100rpx;
		background-color: rgba(255, 255, 255, 0.12);
		align-items: center;
		justify-content: center;
	}

	.btn-icon {
		width: 80rpx;
		margin-right: 20rpx;
	}

	.h-100 {
		height: 100rpx;
	}
</style>
